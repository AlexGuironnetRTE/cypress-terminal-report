{
  "cypress/integration/afterLogs.spec.js": {
    "after fails -> the test 1": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "log test 1"
      }
    ],
    "after fails -> the test 11": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "log test 11"
      }
    ],
    "after fails -> [[ after all #1 ]]": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "after log simple"
      },
      {
        "type": "cy:command",
        "severity": "error",
        "message": "get\tafter simple"
      }
    ],
    "after succeeds -> the test 2": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "log test 2"
      }
    ],
    "after succeeds -> the test 22": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "log test 22"
      }
    ],
    "after succeeds -> the test 222": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "log test 222"
      }
    ],
    "after succeeds -> [[ after all #1 ]]": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "after 1"
      }
    ],
    "after succeeds -> [[ after all #2 ]]": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "after 2"
      }
    ],
    "nested after fails -> nested context -> the test 3": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "log test 3 nested"
      }
    ],
    "nested after fails -> nested context -> [[ after all #1 ]]": [
      {
        "type": "cy:command",
        "severity": "error",
        "message": "get\tafter nested"
      }
    ],
    "nested after fails -> [[ after all #1 ]]": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "log after root"
      },
      {
        "type": "cy:command",
        "severity": "error",
        "message": "get\tafter root"
      }
    ]
  },
  "cypress/integration/beforeLogs.spec.js": {
    "before fails -> [[ before all #1 ]]": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "some before command"
      },
      {
        "type": "cy:command",
        "severity": "error",
        "message": "get\t.breaking.get"
      }
    ],
    "before fails -> [[ after all #1 ]]": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "after"
      }
    ],
    "before succeeds -> [[ before all #1 ]]": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "some before command"
      },
      {
        "type": "cy:log",
        "severity": "success",
        "message": "some other before command"
      }
    ],
    "before succeeds -> [[ before all #2 ]]": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "some before command from second before hook"
      }
    ],
    "before succeeds -> the test fails": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "log"
      },
      {
        "type": "cy:command",
        "severity": "error",
        "message": "get\t.breaking.get"
      }
    ],
    "before succeeds -> [[ after all #1 ]]": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "after before succeeds"
      }
    ],
    "nested before fails -> [[ before all #1 ]]": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "some before command not in nested"
      }
    ],
    "nested before fails -> not nested": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "not nested"
      }
    ],
    "nested before fails -> nested context -> [[ before all #1 ]]": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "some before command in nested"
      },
      {
        "type": "cy:command",
        "severity": "error",
        "message": "get\t.breaking.get"
      }
    ],
    "nested before fails -> nested context -> [[ after all #1 ]]": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "after nested"
      }
    ],
    "nested before fails -> [[ after all #1 ]]": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "after not nested"
      }
    ]
  },
  "cypress/integration/happyFlow.spec.js": {
    "Happy flow. -> Happy flow": [
      {
        "type": "cy:command",
        "severity": "success",
        "message": "visit\t/commands/network-requests"
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "get\t.network-btn"
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "click\t"
      },
      {
        "type": "cy:xhr",
        "severity": "success",
        "message": "GET https://jsonplaceholder.cypress.io/comments/1 (361 ms)\nStatus: 200 - OK"
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "wait\t@getComment"
      },
      {
        "type": "cy:route",
        "severity": "success",
        "message": "(getComment) GET https://jsonplaceholder.cypress.io/comments/1\nStatus: 200\nResponse body: {\n  \"postId\": 1,\n  \"id\": 1,\n  \"name\": \"id labore ex et quam laborum\",\n  \"email\": \"Eliseo@gardner.biz\",\n  \"body\": \"laudantium enim quasi est quidem magnam voluptate ipsam eos\\ntempora quo necessitatibus\\ndolor quam autem quasi\\nreiciendis et nam sapiente accusantium\"\n}"
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "its\t.status"
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "assert\texpected **200** to equal **200**"
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "get\t.network-post"
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "click\t"
      },
      {
        "type": "cy:xhr",
        "severity": "success",
        "message": "POST https://jsonplaceholder.cypress.io/comments (395 ms)\nStatus: 201 - Created"
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "wait\t@postComment"
      },
      {
        "type": "cy:route",
        "severity": "success",
        "message": "(postComment) POST https://jsonplaceholder.cypress.io/comments\nStatus: 201\nResponse body: {\n  \"name\": \"Using POST in cy.intercept()\",\n  \"email\": \"hello@cypress.io\",\n  \"body\": \"You can change the method used for cy.intercept() to be GET, POST, PUT, PATCH, or DELETE\",\n  \"id\": 501\n}"
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "assert\texpected **name=Using+POST+in+cy.intercept()&email=hello%40cypress.io&body=You+can+change+the+method+used+for+cy.intercept()+to+be+GET%2C+POST%2C+PUT%2C+PATCH%2C+or+DELETE** to include **email**"
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "assert\texpected **{ Object (Content-Type, Accept) }** to have property **Content-Type**"
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "assert\texpected **{ Object (name, email, ...) }** to have property **name**"
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "assert\texpected **{ Object (name, email, ...) }** to have property **name** of **Using POST in cy.intercept()**"
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "window\t"
      },
      {
        "type": "cons:error",
        "severity": "error",
        "message": "null,\nundefined,\n,\nfalse,\nfunction () {}"
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "window\t"
      },
      {
        "type": "cons:log",
        "severity": "success",
        "message": "{\n  \"a\": \"b\"\n},\n{\n  \"c\": \"d\"\n},\n10,\nstring"
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "window\t"
      },
      {
        "type": "cons:warn",
        "severity": "warning",
        "message": "This is a warning message"
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "window\t"
      },
      {
        "type": "cons:error",
        "severity": "error",
        "message": "This is an error message"
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "window\t"
      },
      {
        "type": "cons:error",
        "severity": "error",
        "message": "Error: This is an error message with stack.\n    at Context.eval (https://example.cypress.io/__cypress/tests?p=cypress/integration/happyFlow.spec.js:142:30)"
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "window\t"
      },
      {
        "type": "cons:log",
        "severity": "success",
        "message": "This should console.log appear."
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "window\t"
      },
      {
        "type": "cons:log",
        "severity": "success",
        "message": "{\n  \"this\": \"Is an object\",\n  \"with\": {\n    \"keys\": 12512\n  }\n}"
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "window\t"
      },
      {
        "type": "cons:info",
        "severity": "success",
        "message": "This should console.info appear."
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "window\t"
      },
      {
        "type": "cons:debug",
        "severity": "success",
        "message": "This should console.debug appear."
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "get\t.network-put"
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "click\t"
      },
      {
        "type": "cy:xhr",
        "severity": "warning",
        "message": "STUBBED PUT https://jsonplaceholder.cypress.io/comments/1 (506 ms)\nStatus: 404 - Not Found"
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "wait\t@putComment"
      },
      {
        "type": "cy:route",
        "severity": "warning",
        "message": "(putComment) PUT https://jsonplaceholder.cypress.io/comments/1\nStatus: 404\nResponse body: {\n  \"error\": \"whoa, this comment does not exist\"\n}"
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "get\t.network-put-comment"
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "assert\texpected **<div.network-put-comment>** to contain **whoa, this comment does not exist**"
      },
      {
        "type": "cy:command",
        "severity": "error",
        "message": "get\t.breaking-get"
      }
    ]
  },
  "cypress/integration/mochaContexts.spec.js": {
    "main context -> first level test": [
      {
        "type": "cy:command",
        "severity": "error",
        "message": "get\t.breaking-get 1"
      }
    ],
    "main context -> second context -> second level test": [
      {
        "type": "cy:command",
        "severity": "error",
        "message": "get\t.breaking-get 2"
      }
    ],
    "main context -> second context -> third context -> third level test": [
      {
        "type": "cy:command",
        "severity": "error",
        "message": "get\t.breaking-get 3"
      }
    ],
    "unnested before with nested context -> [[ before all #1 ]]": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "before should display before nested context title"
      }
    ],
    "unnested before with nested context -> nested context -> the test nested": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "log"
      }
    ],
    "unnested before and test with nested context -> [[ before all #1 ]]": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "before should display before nested context title"
      }
    ],
    "unnested before and test with nested context -> not nested": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "log"
      }
    ],
    "unnested before and test with nested context -> nested context -> the test nested": [
      {
        "type": "cy:log",
        "severity": "success",
        "message": "log"
      }
    ]
  },
  "cypress/integration/printLogsSuccess.spec.js": {
    "Print Logs Success. -> Print Logs Success": [
      {
        "type": "cy:command",
        "severity": "success",
        "message": "visit\t/"
      },
      {
        "type": "cy:command",
        "severity": "success",
        "message": "contains\tcypress"
      }
    ]
  },
  "cypress/integration/requests.spec.js": {
    "Requests. -> GET 200": [
      {
        "type": "cy:request",
        "severity": "success",
        "message": "https://jsonplaceholder.cypress.io/todos/1\nStatus: 200\nResponse body: {\n  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"delectus aut autem\",\n  \"completed\": false\n}"
      },
      {
        "type": "cy:request",
        "severity": "success",
        "message": "GET https://jsonplaceholder.cypress.io/todos/2\nStatus: 200\nResponse body: {\n  \"userId\": 1,\n  \"id\": 2,\n  \"title\": \"quis ut nam facilis et officia qui\",\n  \"completed\": false\n}"
      },
      {
        "type": "cy:request",
        "severity": "success",
        "message": "GET https://jsonplaceholder.cypress.io/todos/3\nStatus: 200\nResponse body: {\n  \"userId\": 1,\n  \"id\": 3,\n  \"title\": \"fugiat veniam minus\",\n  \"completed\": false\n}"
      },
      {
        "type": "cy:command",
        "severity": "error",
        "message": "get\t.breaking-get"
      }
    ],
    "Requests. -> POST 200": [
      {
        "type": "cy:request",
        "severity": "success",
        "message": "POST https://jsonplaceholder.cypress.io/comments\nStatus: 201\nResponse body: {\n  \"id\": 501\n}"
      },
      {
        "type": "cy:command",
        "severity": "error",
        "message": "get\t.breaking-get"
      }
    ],
    "Requests. -> GET should give 500 response status": [
      {
        "type": "cy:request",
        "severity": "error",
        "message": "GET http://www.mocky.io/v2/5ec993353000007900a6ce1e\nStatus: 500 - Internal Server Error\nResponse body: Hey ya! Great to see you here. Btw, nothing is configured for this request path. Create a rule and start building a mock API."
      }
    ],
    "Requests. -> POST should give 400 response status": [
      {
        "type": "cy:request",
        "severity": "error",
        "message": "POST http://www.mocky.io/v2/5ec993803000009700a6ce1f\nStatus: 400 - Bad Request\nResponse body: {\n  \"status\": \"Wrong!\",\n  \"data\": {\n    \"corpo\": \"corpo da resposta\",\n    \"titulo\": \"titulo da resposta\"\n  }\n}"
      }
    ],
    "Requests. -> PUT should fail": [
      {
        "type": "cy:request",
        "severity": "error",
        "message": "PUT https://jsonplaceholder.cypress.io/comments\nStatus: 404 - Not Found\nResponse body: {}"
      }
    ],
    "Requests. -> cypress logging is disabled in the request": [],
    "Requests. -> Network error": [
      {
        "type": "cy:request",
        "severity": "error",
        "message": "POST http://this.does.not.exist\nNetwork error: getaddrinfo ENOTFOUND this.does.not.exist"
      }
    ]
  }
}
